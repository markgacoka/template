version: '3.8'
services:
  nextjs:
    build: .
    container_name: nextjs
    env_file: .env.local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextjs.rule=Host(`149.28.222.222`)"
      - "traefik.http.routers.nextjs.entrypoints=websecure"
      - "traefik.http.routers.nextjs.tls.certresolver=myresolver"
      - "traefik.http.services.nextjs.loadbalancer.server.port=3000"
    networks: [web]
    deploy:
      replicas: 3
    restart: always
    depends_on: [convex, redis]

  convex:
    image: convexdev/convex:latest
    container_name: convex_backend
    command: "npx convex deploy --production"
    volumes:
      - ./app:/app
    env_file: .env.local
    networks: [web]
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
  traefik:
    image: traefik:v3.1
    container_name: traefik
    command:
      - "--providers.docker=true"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entryPoints.web.http.redirections.entrypoint.to=websecure"
      - "--entryPoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - letsencrypt:/letsencrypt
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks: [web]

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  letsencrypt:
  redis-data:

networks:
  web:
    driver: bridge