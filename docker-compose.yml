version: '3.9'

services:
  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/letsencrypt
      - "/var/run/docker.sock:/var/run/docker.sock"

  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always

  app:
    platform: "linux/amd64"
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /app
    env_file:
      - .env
    image: template:latest
    labels:
      - "traefik.enable=true"
    #   - "traefik.http.routers.app.rule=Host(`gacoka.com`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls.certresolver=myresolver"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
    deploy:
      mode: replicated
      replicas: 3
    restart: always
    depends_on:
      redis:
        condition: service_healthy

volumes:
  letsencrypt:
  redis-data: